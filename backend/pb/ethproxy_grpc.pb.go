// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: ethproxy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EthProxy_EthSendTransaction_FullMethodName = "/ethproxy.EthProxy/EthSendTransaction"
)

// EthProxyClient is the client API for EthProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthProxyClient interface {
	EthSendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*TransactionReceipt, error)
}

type ethProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewEthProxyClient(cc grpc.ClientConnInterface) EthProxyClient {
	return &ethProxyClient{cc}
}

func (c *ethProxyClient) EthSendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*TransactionReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionReceipt)
	err := c.cc.Invoke(ctx, EthProxy_EthSendTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthProxyServer is the server API for EthProxy service.
// All implementations must embed UnimplementedEthProxyServer
// for forward compatibility
type EthProxyServer interface {
	EthSendTransaction(context.Context, *SendTransactionRequest) (*TransactionReceipt, error)
	mustEmbedUnimplementedEthProxyServer()
}

// UnimplementedEthProxyServer must be embedded to have forward compatible implementations.
type UnimplementedEthProxyServer struct {
}

func (UnimplementedEthProxyServer) EthSendTransaction(context.Context, *SendTransactionRequest) (*TransactionReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthSendTransaction not implemented")
}
func (UnimplementedEthProxyServer) mustEmbedUnimplementedEthProxyServer() {}

// UnsafeEthProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthProxyServer will
// result in compilation errors.
type UnsafeEthProxyServer interface {
	mustEmbedUnimplementedEthProxyServer()
}

func RegisterEthProxyServer(s grpc.ServiceRegistrar, srv EthProxyServer) {
	s.RegisterService(&EthProxy_ServiceDesc, srv)
}

func _EthProxy_EthSendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthProxyServer).EthSendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthProxy_EthSendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthProxyServer).EthSendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthProxy_ServiceDesc is the grpc.ServiceDesc for EthProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethproxy.EthProxy",
	HandlerType: (*EthProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EthSendTransaction",
			Handler:    _EthProxy_EthSendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethproxy.proto",
}
